#!/usr/bin/env ruby

option_args = []
value_args = []

$*.each do |arg|
  list = arg =~ /^--/ ? option_args : value_args
  list << arg
end

# Drop command line arguments so 1st argument won't be treated as
# file name for input.
$*.replace []

# Take --client_mac=<hexadecimal-value> if present.
client_mac_opts = option_args.select{ |opt| opt =~ /^--client-mac=[0-9a-fA-F]+$/ }
option_args -= client_mac_opts
client_mac_option = client_mac_opts.last

# Take --use-ssl or --no-ssl if present.
ssl_opts = option_args.select{ |opt| opt =~ /^--(use|no)-ssl$/ }
option_args -= ssl_opts
ssl_option = ssl_opts.last

# The only remaining option we care about is --help, so we either
# show usage for --help or because an unrecognized option was given.
show_usage = option_args.length > 0

# Should have exactly 1 value argument for the address + port number.
show_usage ||= value_args.length != 1

# Port number should consist of an optional IP address, followed by
# colon, followed by a port number
show_usage ||= value_args.first !~ /\A([^\s]*)?:(\d+)\z/
host = $1
port = $2

bin_path = File.dirname(__FILE__)
gem_path = File.dirname( bin_path )
support_path = File.join( gem_path, 'lib', 'client_for_poslynx', 'has_client_console_support.rb' )

if show_usage

  puts <<-EOS

Usage: poslynx_client_console [<host>]:<port-number>

Host is the domain name or IP address of the POSLynx or fake POS
terminal host.  If this is not supplied, then 127.0.0.1 is
assumed.

Options:

  --client-mac=<hexadecimal>  The client MAC value to be assigned
                              to example-request objects.

  --use-ssl                   Use SSL encryption for the connec-
                              tion to the POSLynx.

  --no-ssl                    Don't use SSL encryption for the
                              connection to the POSLynx. This is
                              the default behavior.

  --help                      Prints this usage information.

Opens an interactive Ruby shell with a globally acccessible
poslynx_client method that returns an object with conveniences
for making requests to a POSLynx or to your fake
POSLynx+terminal host.

For example, you might execute the following command from
within the console...

  resp = poslynx_client.send_request( poslynx_client.example_credit_card_sale_request )

To see what else the poslynx_client object provides, see the
source code
in #{support_path}

  EOS

else

  require 'client_for_poslynx/has_client_console_support'
  require 'irb'

  host = '127.0.0.1' if host.nil? || host.length == 0
  port = port.to_i

  class Object
    include ClientForPoslynx::HasClientConsoleSupport
  end

  config = poslynx_client.config
  config.host = host
  config.port = port
  config.use_ssl = ssl_option == '--use-ssl'

  if client_mac_option
    config.client_mac_for_examples = client_mac_option.split('=').last
  end

  IRB.start

end
