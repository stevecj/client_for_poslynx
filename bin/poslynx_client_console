#!/usr/bin/env ruby

option_args = []
value_args = []

$*.each do |arg|
  list = arg =~ /^--/ ? option_args : value_args
  list << arg
end

# Drop command line arguments so 1st argument won't be treated as
# file name for input.
$*.replace []

# The only option we car about is --help, so we either show usage
# for --help or because an unrecognized option was given.
show_usage = option_args.length > 0

# Should have exactly 1 value argument for the address + port number.
show_usage ||= value_args.length != 1

# Port number should consist of an optional IP address, followed by
# colon, followed by a port number
show_usage ||= value_args.first !~ /\A([^\s]*)?:(\d+)\z/
host = $1
port = $2

bin_path = File.dirname(__FILE__)
gem_path = File.dirname( bin_path )
support_path = File.join( gem_path, 'lib', 'client_for_poslynx', 'has_client_console_support.rb' )

if show_usage

  puts <<-EOS

Usage: poslynx_client_console [<host>]:<port-number> Host is the
domain name or IP address of the POSLynx or fake POS terminal
host.  If this is not supplied, then 127.0.0.1 is assumed.

Opens an interactive Ruby shell with a globally acccessible
poslynx_client method that returns an object with conveniences
for making requests to a POSLynx or to your fake
POSLynx+terminal host.

For example, you might execute the following commands from
within the console...

  poslynx_client.client_mac_for_examples = '123456789012'
  resp = poslynx_client.send_request( poslynx_client.example_credit_card_sale_request )

To see what else the poslynx_client object provides, see the
source code
in #{support_path}

  EOS

else

  require 'client_for_poslynx/has_client_console_support'
  require 'irb'

  host = '127.0.0.1' if host.nil? || host.length == 0
  port = port.to_i

  class Object
    include ClientForPoslynx::HasClientConsoleSupport
  end

  config = poslynx_client.config
  config.host = host
  config.port = port

  IRB.start

end
